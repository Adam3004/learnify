openapi: "3.0.3"
info:
  title: Learnify API
  description: API for Learnify application
  version: "1.0.0"
servers:
  - url: /api/v1
    description: Local server
paths:
  /workspaces:
    get:
      summary: List all workspaces owned by the user making the request
      operationId: listWorkspaces
      tags:
        - workspaces
      responses:
        '200':
          description: A list of workspaces
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WorkspaceSummaryDto'
    post:
      summary: Create a workspace
      operationId: createWorkspace
      tags:
        - workspaces
      requestBody:
        description: Details to create a workspace
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkspaceCreateDto'
      responses:
        '201':
          description: Workspace created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkspaceSummaryDto'
  /workspaces/{workspaceId}:
    get:
      summary: Info for a specific workspace
      operationId: getWorkspaceById
      tags:
        - workspaces
      parameters:
        - '$ref': '#/components/parameters/workspaceId'
      responses:
        '200':
          description: A single workspace details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkspaceSummaryDto'
        '400':
          description: Bad request
        '403':
          description: User do not have permissions to get workspace details
        '404':
          description: Workspace not found
  /notes:
    get:
      summary: Search notes
      operationId: listNotes
      tags:
        - notes
      parameters:
        - name: name
          in: query
          required: false
          schema:
            type: string
          description: Filter by resource name (partial or full match).
        - name: ownerId
          in: query
          required: false
          schema:
            type: string
          description: Filter by owner ID.
        - name: accessType
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/ResourceAccessTypeDto'
          description: Filter by access type.
        - name: workspaceId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter by workspace ID.
      responses:
        '200':
          description: A list of notes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NoteSummaryDto'
    post:
      summary: Create a note
      operationId: createNote
      tags:
        - notes
      requestBody:
        description: Note details to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NoteCreateDto'
      responses:
        '201':
          description: Created note
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NoteSummaryDto'
  /notes/recent: #todo we should remeber to add userId when it will exists
    get:
      summary: List recent notes (max 4)
      operationId: listRecentNotes
      tags:
        - notes
      responses:
        '200':
          description: A list of recent notes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NoteSummaryDto'
        '403':
          description: User has no permission to the other user's note
  /notes/{noteId}:
    get:
      summary: Info for a specific note
      operationId: getNoteById
      tags:
        - notes
      parameters:
        - $ref: '#/components/parameters/noteId'
      responses:
        '200':
          description: A single note details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NoteSummaryDto'
        '400':
          description: Bad request
        '403':
          description: User do not have permissions to get note details
        '404':
          description: Note not found
  /notes/{noteId}/{noteTypeDto}:
    delete:
      summary: delete note
      operationId: deleteNote
      tags:
        - notes
      parameters:
        - '$ref': '#/components/parameters/noteId'
      responses:
        '200':
          description: Note deleted
        '400':
          description: Bad request
        '403':
          description: User do not have permissions to delete note
        '404':
          description: Note not found
  /notes/{noteId}/board/pages:
    post:
      summary: Create a new page in board note
      operationId: createBoardNotePage
      tags:
        - notes
      parameters:
        - $ref: '#/components/parameters/noteId'
      responses:
        '201':
          description: Page created
          content:
            application/json:
              schema:
                type: string
        '400':
          description: Bad request
        '403':
          description: User do not have permissions to create board page
  /notes/{noteId}/board/pages/{pageNumber}:
    get:
      summary: Content from a specific page of board note
      operationId: getBoardNotePage
      tags:
        - notes
      parameters:
        - $ref: '#/components/parameters/noteId'
        - $ref: '#/components/parameters/pageNumber'
      responses:
        '200':
          description: Content of a single page board note
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BoardNotePageDto'
        '400':
          description: Bad request
        '403':
          description: User do not have permissions to get board page
        '404':
          description: Note or page not found
    put:
      summary: Update content of a specific page of board note
      operationId: updateBoardNotePage
      tags:
        - notes
      parameters:
        - $ref: '#/components/parameters/noteId'
        - $ref: '#/components/parameters/pageNumber'
      requestBody:
        description: Content to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BoardNotePageDto'
      responses:
        '200':
          description: Content updated
          content:
            application/json:
              schema:
                type: string
        '400':
          description: Bad request
        '403':
          description: User do not have permissions to update board page
  /notes/{noteId}/document/pages:
    post:
      summary: Create a new page in document note
      operationId: createDocumentNotePage
      tags:
        - notes
      parameters:
        - $ref: '#/components/parameters/noteId'
      responses:
        '201':
          description: Page created
          content:
            application/json:
              schema:
                type: string
        '400':
          description: Bad request
        '403':
          description: User do not have permissions to create document page
  /notes/{noteId}/document/pages/{pageNumber}:
    get:
      summary: Content from a specific page of document note
      operationId: getDocumentNotePage
      tags:
        - notes
      parameters:
        - $ref: '#/components/parameters/noteId'
        - $ref: '#/components/parameters/pageNumber'
      responses:
        '200':
          description: Content of a single page document note
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentNotePageDto'
        '400':
          description: Bad request
        '403':
          description: User do not have permissions to get document page
        '404':
          description: Note or page not found
    put:
      summary: Update content of a specific page of document note
      operationId: updateDocumentNotePage
      tags:
        - notes
      parameters:
        - $ref: '#/components/parameters/noteId'
        - $ref: '#/components/parameters/pageNumber'
      requestBody:
        description: Content to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DocumentNotePageDto'
      responses:
        '200':
          description: Content updated
          content:
            application/json:
              schema:
                type: string
        '400':
          description: Bad request
        '403':
          description: User do not have permissions to update document page
  /quizzes:
    get:
      summary: Search quizzes
      operationId: listQuizzes
      tags:
        - quizzes
      parameters:
        - name: name
          in: query
          required: false
          schema:
            type: string
          description: Filter by resource name (partial or full match).
        - name: ownerId
          in: query
          required: false
          schema:
            type: string
          description: Filter by owner ID.
        - name: accessType
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/ResourceAccessTypeDto'
          description: Filter by access type.
        - name: workspaceId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter by workspace ID.
      responses:
        '200':
          description: A list of notes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/QuizSummaryDto'
    post:
      summary: Create a quiz
      operationId: createQuiz
      tags:
        - quizzes
      requestBody:
        description: Quiz to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuizCreationDto'
      responses:
        '201':
          description: Quiz created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuizDetailsDto'
  /quizzes/recent:
    get:
      summary: List recent quizzes (max 4)
      operationId: listRecentQuizzes
      tags:
        - quizzes
      responses:
        '200':
          description: A list of recent quizzes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/QuizSummaryDto'
  /quizzes/{quizId}:
    get:
      summary: Info for a specific quiz
      operationId: showQuizById
      tags:
        - quizzes
      parameters:
        - '$ref': '#/components/parameters/quizId'
      responses:
        '200':
          description: A single quiz
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuizSummaryDto'
        '400':
          description: Bad request
        '403':
          description: User do not have permission to get resource
        '404':
          description: Quiz not found
    delete:
      summary: delete quiz
      operationId: deleteQuiz
      tags:
        - quizzes
      parameters:
        - '$ref': '#/components/parameters/quizId'
      responses:
        '200':
          description: Quiz deleted
        '400':
          description: Bad request
        '403':
          description: User do not have permissions to delete quiz
        '404':
          description: Quiz not found
  /quizzes/{quizId}/details:
    get:
      summary: Details of a specific quiz
      operationId: showDetailsQuizById
      tags:
        - quizzes
      parameters:
        - '$ref': '#/components/parameters/quizId'
      responses:
        '200':
          description: Details of a single Quiz
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuizDetailsDto'
        '400':
          description: Bad request
        '403':
          description: User do not have permission to get resource
        '404':
          description: Not found details
  /quizzes/{quizId}/results:
    put:
      summary: Update results of a specific quiz
      operationId: updateResultsByQuizId
      tags:
        - quizzes
      parameters:
        - '$ref': '#/components/parameters/quizId'
      requestBody:
        description: Number of correct and incorrect answers of a quiz
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuizResultUpdateDto'
      responses:
        '200':
          description: Update results of a single Quiz
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuizResultUpdateDto'
        '400':
          description: Bad request
        '403':
          description: User do not have permissions to get quiz results
        '404':
          description: Quiz not found
    get:
      summary: Get top x results of a specific quiz
      operationId: getTopResultsByQuizId
      tags:
        - quizzes
      parameters:
        - '$ref': '#/components/parameters/quizId'
        - '$ref': '#/components/parameters/numberOfTopResults'
      responses:
        '200':
          description: "List of x users and their scores (top x scores)"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/QuizBestResultDto'
        '400':
          description: Bad request
        '403':
          description: User do not have permissions to get quiz results
        '404':
          description: Quiz not found
  /quizzes/{quizId}/questions:
    post:
      summary: Create questions
      operationId: createQuestions
      tags:
        - quizzes
      parameters:
        - '$ref': '#/components/parameters/quizId'
      requestBody:
        description: Questions to create
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/QuestionCreationDto'
      responses:
        '201':
          description: Questions created
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/QuestionDto'
    get:
      summary: Questions for quiz
      operationId: showQuestionsByQuizId
      tags:
        - quizzes
      parameters:
        - '$ref': '#/components/parameters/quizId'
      responses:
        '200':
          description: Questions of a single Quiz
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/QuestionDto'
        '400':
          description: Bad request
        '403':
          description: User do not have permissions to get quiz questions
  /quizzes/{quizId}/questions/incorrect:
    get:
      summary: Incorrectly answered questions
      operationId: getIncorrectQuestionsByQuizId
      tags:
        - quizzes
      parameters:
        - '$ref': '#/components/parameters/quizId'
      responses:
        '200':
          description: Questions which weren't answered correctly in last attempt of the quiz
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/QuestionDto'
        '400':
          description: Bad request
        '403':
          description: User do not have permissions to get quiz questions
  /quizzes/{quizId}/questions/{questionId}:
    put:
      summary: Update question
      operationId: updateQuestion
      tags:
        - quizzes
      parameters:
        - '$ref': '#/components/parameters/quizId'
        - '$ref': '#/components/parameters/questionId'
      requestBody:
        description: Question to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuestionDto'
      responses:
        '200':
          description: Question updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuestionDto'
        '400':
          description: Bad request
        '403':
          description: User do not have permissions to update quiz question
        '404':
          description: Quiz not found
  /bindings:
    post:
      summary: Create a binding between existing quiz and note
      operationId: createBinding
      tags:
        - bindings
      requestBody:
        description: Binding to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BindingCreateDto'
      responses:
        '201':
          description: Binding created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BindingDto'
  /bindings/notes/{noteId}:
    get:
      summary: List all quizzes bound to a note
      operationId: listQuizzesBoundToNote
      tags:
        - bindings
      parameters:
        - '$ref': '#/components/parameters/noteId'
      responses:
        '200':
          description: A list of quizzes bound to a note
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/QuizSummaryDto'
        '400':
          description: Bad request
        '403':
          description: User do not have permissions to get note binding
        '404':
          description: Note not found
  /bindings/quizzes/{quizId}:
    get:
      summary: List all notes bound to a quiz
      operationId: listNotesBoundToQuiz
      tags:
        - bindings
      parameters:
        - '$ref': '#/components/parameters/quizId'
      responses:
        '200':
          description: A list of notes bound to a quiz
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NoteSummaryDto'
        '400':
          description: Bad request
        '403':
          description: User do not have permissions to get quiz binding
        '404':
          description: Quiz not found
  /users:
    get:
      summary: Search for users by email or display name
      operationId: searchUsers
      tags:
        - users
      parameters:
        - name: email
          in: query
          required: false
          schema:
            type: string
            example: "testuser@gmail.com"
            description: "User's email"
        - name: displayName
          in: query
          required: false
          schema:
            type: string
            example: "Test user"
            description: "User's display name"
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserSummaryDto'
        '400':
          description: Bad request
        '403':
          description: User do not have permissions to get users
    post:
      summary: Register a new user
      operationId: registerUser
      tags:
        - users
      requestBody:
        description: User details to register
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreateDto'
      responses:
        '201':
          description: User registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSummaryDto'
  /resources/{resourceType}/{resourceId}/permissions:
    get:
      summary: get full permission model to the resource
      operationId: getFullPermissionToResource
      tags:
        - permissions
      parameters:
        - $ref: '#/components/parameters/resourceType'
        - $ref: '#/components/parameters/resourceId'
      responses:
        '200':
          description: Full permission model to the resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceFullPermissionDto'
        '400':
          description: Bad request
        '403':
          description: User do not have permission to get full permission to the resource
        '404':
          description: Resource not found
    put:
      summary: edit resource permission model
      operationId: editResourcePermissionModel
      tags:
        - permissions
      parameters:
        - $ref: '#/components/parameters/resourceType'
        - $ref: '#/components/parameters/resourceId'
      requestBody:
        description: Global permission access for resource
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResourceGlobalPermissionModelDto'
      responses:
        '200':
          description: Full permission model edited to resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceGlobalPermissionModelDto'
        '400':
          description: Bad request
        '403':
          description: User do not have permissions to set resource permission model
        '404':
          description: Resource not found
  /resources/{resourceType}/{resourceId}/permissions/users:
    get:
      summary: get permissions to some resource
      operationId: getPermissionsToResource
      tags:
        - permissions
      parameters:
        - $ref: '#/components/parameters/resourceType'
        - $ref: '#/components/parameters/resourceId'
      responses:
        '200':
          description: Permissions to resource
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PermissionSummaryDto'
        '400':
          description: Bad request
        '403':
          description: User do not have permission to get permissions to the resource
        '404':
          description: Resource not found
    post:
      summary: add permission to the resource
      operationId: setPermissionToResource
      tags:
        - permissions
      parameters:
        - $ref: '#/components/parameters/resourceType'
        - $ref: '#/components/parameters/resourceId'
      requestBody:
        description: Permission to add
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PermissionDto'
      responses:
        '200':
          description: Permission added to resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PermissionSummaryDto'
        '400':
          description: Bad request
        '403':
          description: User do not have permissions to set permission to the resource
        '404':
          description: Resource not found
  /resources/{resourceType}/{resourceId}/permissions/users/{userId}:
    get:
      summary: get permission to the resource for specific user
      operationId: getPermissionToResourceForUser
      tags:
        - permissions
      parameters:
        - $ref: '#/components/parameters/resourceType'
        - $ref: '#/components/parameters/resourceId'
        - $ref: '#/components/parameters/userId'
      responses:
        '200':
          description: Permission to resource for user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PermissionSummaryDto'
        '400':
          description: Bad request
        '403':
          description: User do not have permissions to get information about user's permission to the resource
        '404':
          description: Resource not found
    put:
      summary: edit permission to the resource
      operationId: editPermissionToResource
      tags:
        - permissions
      parameters:
        - $ref: '#/components/parameters/resourceType'
        - $ref: '#/components/parameters/resourceId'
        - $ref: '#/components/parameters/userId'
      requestBody:
        description: Permission to edit
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PermissionDto'
      responses:
        '200':
          description: Permission edited to resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PermissionSummaryDto'
        '400':
          description: Bad request
        '403':
          description: User do not have permissions to set permission to the resource
        '404':
          description: Resource not found
    delete:
      summary: delete permission to the resource
      operationId: deletePermissionToResource
      tags:
        - permissions
      parameters:
        - $ref: '#/components/parameters/resourceType'
        - $ref: '#/components/parameters/resourceId'
        - $ref: '#/components/parameters/userId'
      responses:
        '200':
          description: Permission to resource deleted
        '400':
          description: Bad request
        '403':
          description: User do not have permissions to delete permission to the resource
        '404':
          description: Resource not found
  /resources/{resourceType}/{resourceId}/comments:
    get:
      summary: get comments for resource
      operationId: getCommentsToResource
      tags:
        - comments
      parameters:
        - $ref: '#/components/parameters/resourceType'
        - $ref: '#/components/parameters/resourceId'
      responses:
        '200':
          description: Comments to resource
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CommentDto'
        '400':
          description: Bad request
        '403':
          description: User do not have permission to get comments to the resource
        '404':
          description: Resource not found
    post:
      summary: add comment to the resource
      operationId: addCommentToResource
      tags:
        - comments
      parameters:
        - $ref: '#/components/parameters/resourceType'
        - $ref: '#/components/parameters/resourceId'
      requestBody:
        description: Comment to add
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentCreationDto'
      responses:
        '200':
          description: Comment added to resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentDto'
        '400':
          description: Bad request
        '403':
          description: User do not have permissions to add comment to the resource
        '404':
          description: Resource not found
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    PermissionDto:
      type: object
      description: "Details to add new permission"
      properties:
        userId:
          type: string
          description: "Id of user"
          example: "1234"
        accessTypeDto:
          $ref: "#/components/schemas/UserAccessLevelDto"
      required: [ userId, accessTypeDto ]
    ResourceAccessTypeDto:
      type: string
      description: "Type of access to the resource"
      enum: [ PUBLIC, PRIVATE ]
      example: PUBLIC
    UserAccessLevelDto:
      type: string
      description: "Level of access to the resource for the user"
      enum: [ RW, RO ]
      example: RW
    ResourceTypeDto:
      type: string
      description: "Type of resource"
      enum: [ QUIZ, WORKSPACE,  NOTE ]
      example: NOTE
    ResourceGlobalPermissionModelDto:
      type: object
      description: "Global permission access for resource"
      properties:
        accessType:
          $ref: '#/components/schemas/ResourceAccessTypeDto'
      required: [ accessType ]
    WorkspaceCreateDto:
      type: object
      description: "Details to create a workspace"
      properties:
        displayName:
          type: string
          description: "Display name of the workspace"
          example: "Semestr 6"
        resourceAccessTypeDto:
          $ref: '#/components/schemas/ResourceAccessTypeDto'
      required: [ displayName, resourceAccessTypeDto ]
    NoteCreateDto:
      type: object
      description: "Details to create a note"
      properties:
        title:
          type: string
          description: "Title of the note"
          example: "Systemy rozproszone - middleware"
        description:
          type: string
          description: "Description of the note"
          example: "Ice/grpc/Thrift"
        workspaceId:
          type: string
          format: uuid
          description: "UUID of workspace"
          example: "sample00-id-0000-0000-workspaceid0"
        type:
          allOf:
            - $ref: '#/components/schemas/NoteTypeDto'
          example: "board"
        resourceAccessTypeDto:
          $ref: '#/components/schemas/ResourceAccessTypeDto'
      required: [ title, description, workspaceId, type, resourceAccessTypeDto ]
    NoteSummaryDto:
      type: object
      description: "Summary of a note - without content"
      properties:
        id:
          description: "UUID of the note"
          example: "sample00-id-0000-0000-note00000000"
          type: string
          format: uuid
        workspace:
          $ref: '#/components/schemas/WorkspaceSummaryDto'
        title:
          type: string
          description: "Title of the note"
          example: "Systemy rozproszone - middleware"
        description:
          type: string
          description: "Description of the note"
          example: "Ice/grpc/Thrift"
        author:
          $ref: '#/components/schemas/UserSummaryDto'
        updatedAt:
          description: "Date of last modification"
          type: string
          format: date-time
        createdAt:
          description: "Date of creation"
          type: string
          format: date-time
        type:
          allOf:
            - $ref: '#/components/schemas/NoteTypeDto'
          example: "board"
        pagesCount:
          type: integer
          format: int32
          example: 3
        accessType:
          $ref: '#/components/schemas/ResourceAccessTypeDto'
      required: [ id, workspace, title, description, author, updatedAt, createdAt, type, pagesCount, accessType ]


    # TODO decide if we should store more detailed objects on backend side or just store the content as string (json)
    # storing as string is easier to implement but harder to use on backend - such like allowing PATCH operation on content
    # on the other hand storing as object introduces many mappings between layers what is not the best idea with saving data very often

    BoardNotePageDto:
      type: object
      description: "Content of a single of board page note"
      properties:
        version:
          type: integer
          format: int32
          description: "Version of the page"
          example: 1
        content:
          type: string
          description: "Content of the note"
          example: "This is a sample content of the note"
      required: [ content, version ]
    DocumentNotePageDto:
      type: object
      description: "Content of a single of text document page note"
      properties:
        version:
          type: integer
          format: int32
          description: "Version of the page"
          example: 1
        content:
          type: string
          description: "Content of the note"
          example: "This is a sample content of the note"
      required: [ content, version ]
    WorkspaceSummaryDto:
      type: object
      description: "Summary of a workspace"
      required:
        - id
        - displayName
        - author
      properties:
        id:
          type: string
          format: uuid
          description: "UUID of the workspace"
          example: "sample00-id-0000-0000-workspace000"
        displayName:
          type: string
          description: "Display name of the workspace"
          example: "Semestr 6"
        author:
          $ref: '#/components/schemas/UserSummaryDto'
    PermissionSummaryDto:
      type: object
      description: "Summary of a permission"
      required:
        - userId
        - resourceId
        - accessLevel
      properties:
        userId:
          type: string
          example: "123UserId321"
          description: "id of the user"
        resourceId:
          type: string
          format: uuid
          example: "sample00-id-0000-0000-quiz00000000"
          description: "UUID of the resource"
        accessLevel:
          $ref: '#/components/schemas/UserAccessLevelDto'
    ResourceFullPermissionDto:
      type: object
      description: "Full permission model to the resource"
      required:
        - permissions
        - accessType
        - resourceId
        - resourceType
      properties:
        resourceId:
          type: string
          format: uuid
          example: "sample00-id-0000-0000-quiz00000000"
          description: "UUID of the resource"
        resourceType:
          $ref: '#/components/schemas/ResourceTypeDto'
        accessType:
          $ref: '#/components/schemas/ResourceAccessTypeDto'
        permissions:
          type: array
          items:
            $ref: '#/components/schemas/UserSummaryWithAccessLevelDto'
    UserSummaryWithAccessLevelDto:
      type: object
      description: "Summary of a permission with user"
      required:
        - accessLevel
        - user
      properties:
        accessLevel:
          $ref: '#/components/schemas/UserAccessLevelDto'
        user:
          $ref: '#/components/schemas/UserSummaryDto'
    UserCreateDto:
      type: object
      description: "Details to create a user"
      required:
        - displayName
        - email
      properties:
        displayName:
          type: string
          description: "Display name of the user"
          example: "Test user"
        email:
          type: string
          description: "User's email"
          example: "testUser@gmail.com"
    UserSummaryDto:
      type: object
      description: "Summary of a user"
      required:
        - id
        - displayName
        - email
      properties:
        id:
          type: string
          description: "ID of the user"
          example: "asdoifihgausyiodqfeuvhk123"
        displayName:
          type: string
          description: "Display name of the user"
          example: "Krzysztof Usnarski"
        email:
          type: string
          description: "User's email"
          example: "testUser@gmail.com"
    QuizSummaryDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        workspace:
          $ref: '#/components/schemas/WorkspaceSummaryDto'
        title:
          type: string
        score:
          type: string
        author:
          $ref: '#/components/schemas/UserSummaryDto'
        lastTryDate:
          type: string
          format: date-time
        accessType:
          $ref: '#/components/schemas/ResourceAccessTypeDto'
      required:
        - id
        - workspace
        - author
        - title
        - score
        - accessType
        - lastTryDate

    QuizSimpleResultDto:
      type: object
      required:
        - incorrect
        - correct
      properties:
        incorrect:
          type: integer
          format: int32
        correct:
          type: integer
          format: int32
    QuizBestResultDto:
      type: object
      required:
        - userName
        - percentage
        - date
      properties:
        userName:
          type: string
        percentage:
          type: integer
          format: int32
          example: "50"
        date:
          type: string
          format: date-time
    QuizCreationDto:
      type: object
      required:
        - workspaceId
        - title
        - description
        - resourceAccessTypeDto
      properties:
        workspaceId:
          type: string
          format: uuid
        title:
          type: string
        description:
          type: string
        resourceAccessTypeDto:
          $ref: '#/components/schemas/ResourceAccessTypeDto'
    QuizDetailsDto:
      type: object
      required:
        - id
        - workspace
        - title
        - description
        - numberOfQuestions
        - author
        - createdAt
      properties:
        id:
          type: string
          format: uuid
        workspace:
          $ref: '#/components/schemas/WorkspaceSummaryDto'
        title:
          type: string
        description:
          type: string
        numberOfQuestions:
          type: integer
          format: int32
        lastScore:
          $ref: '#/components/schemas/QuizSimpleResultDto'
        bestScore:
          $ref: '#/components/schemas/QuizSimpleResultDto'
        author:
          $ref: '#/components/schemas/UserSummaryDto'
        createdAt:
          type: string
          format: date-time
    QuestionDto:
      type: object
      required:
        - questionId
        - question
        - type
        - quizId
        - weight
        - choices
        - feedback
        - otherProperties
      properties:
        questionId:
          type: string
          format: uuid
        question:
          type: string
        type:
          allOf:
            - $ref: '#/components/schemas/QuestionTypeDto'
        quizId:
          type: string
          format: uuid
        weight:
          type: integer
          format: int32
        choices:
          type: string
        feedback:
          type: string
        otherProperties:
          type: string
    QuestionCreationDto:
      type: object
      required:
        - question
        - type
        - weight
        - choices
        - feedback
        - otherProperties
      properties:
        question:
          type: string
        type:
          allOf:
            - $ref: '#/components/schemas/QuestionTypeDto'
        weight:
          type: integer
          format: int32
        choices:
          type: string
        feedback:
          type: string
        otherProperties:
          type: string
    CommentDto:
      type: object
      required:
        - commentId
        - userSummary
        - rating
        - title
        - description
      properties:
        commentId:
          type: string
          format: uuid
        userSummary:
          $ref: '#/components/schemas/UserSummaryDto'
        rating:
          type: integer
          format: int16
        title:
          type: string
        description:
          type: string
    CommentCreationDto:
      type: object
      required:
        - rating
      properties:
        rating:
          type: integer
          format: int16
        title:
          type: string
        description:
          type: string
    QuizResultUpdateDto:
      type: object
      required:
        - correct
        - incorrect
        - incorrectIds
      properties:
        correct:
          type: integer
          format: int32
        incorrect:
          type: integer
          format: int32
        incorrectIds:
          type: array
          items:
            type: string
            format: uuid
    BindingCreateDto:
      type: object
      required:
        - quizId
        - noteId
      properties:
        quizId:
          type: string
          format: uuid
        noteId:
          type: string
          format: uuid
    BindingDto:
      type: object
      required:
        - bindingId
        - quizId
        - noteId
      properties:
        bindingId:
          type: string
          format: uuid
        quizId:
          type: string
          format: uuid
        noteId:
          type: string
          format: uuid
    NoteTypeDto:
      type: string
      enum: [ DOCUMENT, BOARD ]
      example: document
    QuestionTypeDto:
      type: string
      enum: [ multiple-choice, single-choice ]
      example: multiple-choice

  parameters:
    workspaceId:
      name: workspaceId
      in: path
      required: true
      description: "UUID of the workspace"
      schema:
        type: string
        format: uuid
        example: "sample00-id-0000-0000-workspaceid0"
    quizId:
      name: quizId
      in: path
      required: true
      description: "UUID of the quiz"
      schema:
        type: string
        format: uuid
        example: "sample00-id-0000-0000-quiz00000000"
    numberOfTopResults:
      name: numberOfTopResults
      in: query
      required: true
      description: number of top results which are expected to be returned
      schema:
        type: integer
        format: int32
        example: 5
    noteId:
      name: noteId
      in: path
      required: true
      description: "UUID of the note"
      schema:
        type: string
        format: uuid
        example: "sample00-id-0000-0000-note00000000"
    noteTypeDto:
      name: noteTypeDto
      in: path
      required: true
      description: "type of note"
      schema:
        $ref: '#/components/schemas/NoteTypeDto'
    pageNumber:
      name: pageNumber
      in: path
      required: true
      description: "Page number"
      schema:
        type: integer
        format: int32
        example: 1
    resourceId:
      name: resourceId
      in: path
      required: true
      schema:
        type: string
        format: uuid
        example: "sample00-id-0000-0000-quiz00000000"
        description: "UUID of the resource"
    resourceType:
      name: resourceType
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/ResourceTypeDto'
    userId:
      name: userId
      in: path
      required: true
      schema:
        type: string
        example: "123UserId321"
        description: "id of the user"
    questionId:
      name: questionId
      in: path
      required: true
      schema:
        type: string
        format: uuid
        example: "sample00-id-0000-0000-question00000000"
        description: "UUID of the question"
security:
  - bearerAuth: [ ]