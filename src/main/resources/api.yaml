openapi: "3.0.3"
info:
  title: Notes API
  description: API for managing notes
  version: "1.0.0"
paths:
  /workspaces:
    get:
      summary: List all workspaces owned by the user making the request
      operationId: listWorkspaces
      tags:
        - workspaces
      responses:
        '200':
          description: A list of workspaces
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WorkspaceSummaryDto'
    post:
      summary: Create a workspace
      operationId: createWorkspace
      tags:
        - workspaces
      requestBody:
        description: Details to create a workspace
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkspaceCreateDto'
      responses:
        '201':
          description: Workspace created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkspaceSummaryDto'
  /notes:
    post:
      summary: Create a note
      operationId: createNote
      tags:
        - notes
      requestBody:
        description: Note details to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NoteCreateDto'
      responses:
        '201':
          description: Created note
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NoteSummaryDto'
  /notes/recent:
    get:
      summary: List recent notes (max 4)
      operationId: listRecentNotes
      tags:
        - notes
      responses:
        '200':
          description: A list of recent notes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NoteSummaryDto'
  /notes/{noteId}:
    get:
      summary: Info for a specific note
      operationId: getNoteById
      tags:
        - notes
      parameters:
        - name: noteId
          in: path
          required: true
          schema:
            type: string
            example: "sample00-uuid-0000-0000-note00000000"
            description: "UUID of the note"
      responses:
        '200':
          description: A single note
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NoteSummaryDto'
  /notes/{noteId}/content/{pageNumber}:
    get:
      summary: Content from a specific page of note
      operationId: getNoteContentPage
      tags:
        - notes
      parameters:
        - name: noteId
          in: path
          required: true
          schema:
            type: string
            example: "sample00-id-0000-0000-note00000000"
            description: "UUID of the note"
        - name: pageNumber
          in: path
          required: true
          schema:
            type: integer
            format: int32
            example: 1
            description: "Page number"
      responses:
        '200':
          description: Content of a single page note
          content:
            application/json:
              schema:
                type: string
    put:
      summary: Update content of a specific page of note
      operationId: updateNoteContentPage
      tags:
        - notes
      parameters:
        - name: noteId
          in: path
          required: true
          schema:
            type: string
            example: "sample00-id-0000-0000-note00000000"
            description: "UUID of the note"
        - name: pageNumber
          in: path
          required: true
          schema:
            type: integer
            format: int32
            example: 1
            description: "Page number"
      requestBody:
        description: Content to update
        required: true
        content:
          application/json:
            schema:
              type: string
      responses:
        '200':
          description: Content updated
          content:
            application/json:
              schema:
                type: string
  /quizzes:
    post:
      summary: Create a quiz
      operationId: createQuiz
      tags:
        - quizzes
      requestBody:
        description: Quiz to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuizCreationDto'
      responses:
        '201':
          description: Quiz created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuizDetailsDto'
  /quizzes/{quizId}:
    get:
      summary: Info for a specific quiz
      operationId: showQuizById
      tags:
        - quizzes
      parameters:
        - name: quizId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A single quiz
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuizSummaryDto'
  /quizzes/{quizId}/details:
    get:
      summary: Details of a specific quiz
      operationId: showDetailsQuizById
      tags:
        - quizzes
      parameters:
        - name: quizId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Details of a single Quiz
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuizDetailsDto'
  /quizzes/{quizId}/questions:
    post:
      summary: Create questions
      operationId: createQuestions
      tags:
        - quizzes
      parameters:
        - name: quizId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Questions to create
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/QuestionCreationDto'
      responses:
        '201':
          description: Questions created
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/QuestionDto'
    get:
      summary: Questions for quiz
      operationId: showQuestionsByQuizId
      tags:
        - quizzes
      parameters:
        - name: quizId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Questions of a single Quiz
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/QuestionDto'
components:
  schemas:
    WorkspaceCreateDto:
      type: object
      description: "Details to create a workspace"
      properties:
        displayName:
          type: string
          description: "Display name of the workspace"
          example: "Semestr 6"
      required: [ displayName ]
    NoteCreateDto:
      type: object
      description: "Details to create a note"
      properties:
        title:
          type: string
          description: "Title of the note"
          example: "Systemy rozproszone - middleware"
        description:
          type: string
          description: "Description of the note"
          example: "Ice/grpc/Thrift"
        workspaceId:
          type: string
          description: "UUID of workspace"
          example: "sample00-id-0000-0000-workspaceid0"
      required: [ title, description, workspaceId ]
    NoteSummaryDto:
      type: object
      description: "Summary of a note - without content"
      properties:
        id:
          description: "UUID of the note"
          example: "sample00-id-0000-0000-note00000000"
          type: string
        workspace:
          $ref: '#/components/schemas/WorkspaceSummaryDto'
        title:
          type: string
          description: "Title of the note"
          example: "Systemy rozproszone - middleware"
        description:
          type: string
          description: "Description of the note"
          example: "Ice/grpc/Thrift"
        author:
          $ref: '#/components/schemas/UserSummaryDto'
        updatedAt:
          description: "Date of last modification"
          type: string
          format: date-time
        createdAt:
          description: "Date of creation"
          type: string
          format: date-time
    WorkspaceSummaryDto:
      type: object
      description: "Summary of a workspace"
      properties:
        id:
          type: string
          description: "UUID of the workspace"
          example: "sample00-id-0000-0000-workspace000"
        displayName:
          type: string
          description: "Display name of the workspace"
          example: "Semestr 6"
    UserSummaryDto:
      type: object
      description: "Summary of a user"
      required:
        - id
        - displayName
        - email
      properties:
        id:
          type: string
          description: "UUID of the user"
          example: "sample00-id-0000-0000-user00000000"
        displayName:
          type: string
          description: "Display name of the user"
          example: "Krzysztof Usnarski"
        email:
          type: string
          description: "User's email"
          example: "testUser@gmail.com"
    NoteDto:
      type: object
      required:
        - id
        - content
      properties:
        id:
          type: integer
          format: int64
        content:
          type: string
    QuizSummaryDto:
      type: object
      required:
        - id
        - workspaceId
        - title
        - score
      properties:
        id:
          type: string
        workspaceId:
          type: string
        title:
          type: string
        score:
          type: string
        author:
          $ref: '#/components/schemas/UserSummaryDto'
        date:
          type: string
    QuizSimpleResultDto:
      type: object
      required:
        - incorrect
        - correct
      properties:
        incorrect:
          type: integer
          format: int32
        correct:
          type: integer
          format: int32
    QuizCreationDto:
      type: object
      required:
        - workspaceId
        - title
        - description
        - numberOfQuestions
      properties:
        workspaceId:
          type: string
        title:
          type: string
        description:
          type: string
        numberOfQuestions:
          type: integer
          format: int32
    QuizDetailsDto:
      type: object
      required:
        - id
        - workspaceId
        - title
        - description
        - numberOfQuestions
        - author
      properties:
        id:
          type: string
        workspaceId:
          type: string
        title:
          type: string
        description:
          type: string
        numberOfQuestions:
          type: integer
          format: int32
        lastScore:
          $ref: '#/components/schemas/QuizSimpleResultDto'
        bestScore:
          $ref: '#/components/schemas/QuizSimpleResultDto'
        author:
          $ref: '#/components/schemas/UserSummaryDto'
        lastTryDate:
          type: string
          format: date-time
    QuestionDto:
      type: object
      required:
        - questionId
        - question
        - type
        - quizId
        - weight
        - choices
        - feedback
        - otherProperties
      properties:
        questionId:
          type: string
        question:
          type: string
        type:
          type: string
          enum: [ multiple-choice, single-choice ]
        quizId:
          type: string
        weight:
          type: integer
          format: int32
        choices:
          type: string
        feedback:
          type: string
        otherProperties:
          type: string
    QuestionCreationDto:
      type: object
      required:
        - question
        - type
        - weight
        - choices
        - feedback
        - otherProperties
      properties:
        question:
          type: string
        type:
          type: string
          enum: [ multiple-choice, single-choice ]
        weight:
          type: integer
          format: int32
        choices:
          type: string
        feedback:
          type: string
        otherProperties:
          type: string